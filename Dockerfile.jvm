# Fallback Dockerfile for JVM mode (for development/testing)
# Usage: docker build -f Dockerfile.jvm -t lumios-jvm .

# Stage 1: Build
FROM gradle:8.12.0-jdk21 AS build
WORKDIR /app

# Copy gradle files first for better caching
COPY gradle/ gradle/
COPY gradlew gradlew.bat build.gradle settings.gradle ./

# Copy source code
COPY src/ src/

# Make gradlew executable
RUN chmod +x ./gradlew

# Build the JAR
RUN ./gradlew bootJar

# Stage 2: Runtime
FROM eclipse-temurin:21-jre-alpine
WORKDIR /app

# Install curl for health checks
RUN apk add --no-cache curl

# Copy the built JAR
COPY --from=build /app/build/libs/*.jar app.jar

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -S -D -H -u 1001 -s /sbin/nologin -G appgroup appuser

USER appuser

# Expose the port
EXPOSE 8847

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8847/actuator/health || exit 1

# Set JVM options for better memory and CPU usage
ENV JAVA_OPTS="-XX:MaxRAMPercentage=85.0 -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms256m -XX:MaxGCPauseMillis=100"

# Set the entry point
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]